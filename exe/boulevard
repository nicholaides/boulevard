#!/usr/bin/env ruby

require 'commander/import'
require_relative '../lib/boulevard'

program :name, 'boulevard'
program :version, Boulevard::VERSION
program :description, 'Manage your Boulevard setup'

def catch_no_key_error
  yield
rescue Boulevard::Crypt::NoKeyError
  $stderr.puts "Secret key required."
  $stderr.puts "Supply one via the '--secret-key' flag or store one in #{Boulevard::Crypt::KEY_FILE}"
  $stderr.puts "You can generate one via `boulevard generate-secret-key`"
  exit 1
end

command :'generate-key' do |c|
  c.syntax = 'boulevard generate-key'
  c.summary = 'Generate a new shared key'
  c.description = 'Generates a new shared key that you will use both locally and on the server'

  c.action do |args, options|
    puts Boulevard::Crypt.generate_key
  end
end

command :'package-code' do |c|
  c.syntax = 'boulevard package-code [path] [options]'
  c.summary = 'Take some code and package it up to be run on the host'

  c.description = 'If path given, load file, otherwise load from from STDIN.'

  c.option '--secret-key STRING', String, 'Secret key'

  c.action do |args, options|
    catch_no_key_error do
      output = if path = args[0]
                 Boulevard.package_file(path, secret_key: options.secret_key)
               else
                 Boulevard.package_code($stdin.read, secret_key: options.secret_key)
               end

      puts output
    end
  end
end

command :'unpackage-code' do |c|
  c.syntax = 'boulevard unpackage-code [path] [options]'
  c.summary = 'Take some code and unpackage it. This is mostly for testing.'

  c.description = 'If path given, load file, otherwise load from from STDIN.'

  c.option '--secret-key STRING', String, 'Secret key'

  c.action do |args, options|
    catch_no_key_error do
      package = if path = args[0]
                  File.read(path)
                else
                  $stdin.read
                end

      puts Boulevard.unpackage(package, secret_key: options.secret_key)
    end
  end
end
